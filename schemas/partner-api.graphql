extend schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key", "@shareable"])
{
  query: Query
  mutation: Mutation
}

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @federation__requires(fields: federation__FieldSet!) on FIELD_DEFINITION

directive @federation__provides(fields: federation__FieldSet!) on FIELD_DEFINITION

directive @federation__external(reason: String) on OBJECT | FIELD_DEFINITION

directive @federation__tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @federation__extends on OBJECT | INTERFACE

directive @shareable on OBJECT | FIELD_DEFINITION

directive @federation__inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @federation__override(from: String!) on FIELD_DEFINITION

type Query {
  getPartner: Partner
  getPartnerByID(id: ID!): Partner
  getPartnerByEmailAddress(emailAddress: String!): Partner
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}

type Experience
  @key(fields: "id")
{
  id: ID!
  partners: [Partner!]!
}

input ExperienceKey {
  id: ID!
}

type Mutation {
  """
  This is used to generate a partner, but if they are already created we will return their details
  """
  findOrCreatePartner(partnerInput: PartnerInput): Partner
  updatePartner(partnerInput: PartnerInput): Partner

  """
  A partner is limited to view the bookings of certain experiences, this allows you to link an 
  experience to the partner record so they can view bookings for that experience.
  """
  linkExperience(partnerKey: PartnerKey, experienceKey: ExperienceKey): Partner
  unlinkExperience(partnerKey: PartnerKey, experienceKey: ExperienceKey): Partner
}

type Partner
  @key(fields: "id")
{
  id: ID!
  experiences: [Experience!]!
  fullName: String
  firstName: String
  lastName: String
  emailAddress: String!
  createdAt: Date! @shareable
  updatedAt: Date! @shareable
}

input PartnerInput {
  emailAddress: String!
  firstName: String
  lastName: String
  phone: String
}

input PartnerKey {
  id: ID!
}

scalar Date

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

scalar link__Import

scalar federation__FieldSet

scalar _Any

type _Service {
  sdl: String
}

union _Entity = Experience | Partner